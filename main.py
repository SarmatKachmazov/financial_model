import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from fpdf import FPDF
import tempfile
import os


st.title("\U0001F4B0 –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
st.markdown("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–∞—Ä–º–∞—Ç.""")

# input –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns(2)
with col1:
    current_age = st.number_input("–ú–æ–π —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=100, value=24)
    retirement_age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", min_value=current_age+1, max_value=100, value=45)
    starting_capital = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª (‚ÇΩ)", min_value=0, value=0, format="%d")
    monthly_contribution_start = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å (‚ÇΩ)", min_value=0, value=100_000, format="%d")
    accumulation_interest = st.slider("–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –ø–µ—Ä–∏–æ–¥ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è (%)", 0.0, 30.0, 15.0) / 100
with col2:
    monthly_target_income_today = st.number_input("–ñ–µ–ª–∞–µ–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (–≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö ‚ÇΩ)", value=600_000, format="%d")
    inflation_rate = st.slider("–ì–æ–¥–æ–≤–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è (%)", 0.0, 20.0, 9.4) / 100
    retirement_interest = st.slider("–°—Ç–∞–≤–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –ø–∞—Å—Å–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (%)", 0.0, 30.0, 15.0) / 100
    contribution_growth_rate = st.slider("–†–æ—Å—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤ (% –≤ –≥–æ–¥)", 0.0, 30.0, 6.7) / 100

# –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç—ã
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω"):
    years = retirement_age - current_age
    months = years * 12

    monthly_target_income_future = monthly_target_income_today * ((1 + inflation_rate) ** years)
    required_capital = monthly_target_income_future * 12 / retirement_interest

    capital = starting_capital
    contributions = []
    capitals = []

    for year in range(years):
        for month in range(12):
            contribution = monthly_contribution_start * ((1 + contribution_growth_rate) ** year)
            capital *= (1 + accumulation_interest / 12)
            capital += contribution
            contributions.append(contribution)
            capitals.append(capital)

    final_nominal = capital
    final_real = final_nominal / ((1 + inflation_rate) ** years)
    goal_achieved = final_nominal >= required_capital
    plan_completion_pct = final_nominal / required_capital * 100

    df = pd.DataFrame({
        "–ú–µ—Å—è—Ü": np.arange(1, months + 1),
        "–í–∑–Ω–æ—Å (‚ÇΩ)": contributions,
        "–ö–∞–ø–∏—Ç–∞–ª (‚ÇΩ)": capitals,
        "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ (%)": [c / required_capital * 100 for c in capitals]
    })

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.metric("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–ø–∏—Ç–∞–ª (‚ÇΩ)", f"{required_capital:,.0f}".replace(",", " "))
    st.metric("–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª (‚ÇΩ)", f"{final_nominal:,.0f}".replace(",", " "), delta=f"{'–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞' if goal_achieved else '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}")
    st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞", f"{plan_completion_pct:.2f}%")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π")
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(df["–ú–µ—Å—è—Ü"], df["–ö–∞–ø–∏—Ç–∞–ª (‚ÇΩ)"], label="–ö–∞–ø–∏—Ç–∞–ª", color="green")
    ax.plot(df["–ú–µ—Å—è—Ü"], df["–í–∑–Ω–æ—Å (‚ÇΩ)"].cumsum(), label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤–∑–Ω–æ—Å—ã", linestyle="--", color="blue")
    ax.axhline(required_capital, color="red", linestyle=":", label="–¶–µ–ª–µ–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª")
    ax.set_title("–†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤")
    ax.set_xlabel("–ú–µ—Å—è—Ü")
    ax.set_ylabel("‚ÇΩ")
    ax.legend()
    st.pyplot(fig)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π")
    st.dataframe(df.style.format({"–í–∑–Ω–æ—Å (‚ÇΩ)": "{:,.0f}", "–ö–∞–ø–∏—Ç–∞–ª (‚ÇΩ)": "{:,.0f}", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ (%)": "{:.2f}"}))

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV
    st.subheader("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ CSV", csv, "financial_model.csv", "text/csv")

    # PDF —ç–∫—Å–ø–æ—Ä—Ç
    st.subheader("–°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç")

    font_path = os.path.join("fonts", "DejaVuSans.ttf")

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
        class PDF(FPDF):
            def header(self):
                self.set_font("DejaVu", '', 14)
                self.cell(0, 10, "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", 0, 1, 'C')

        pdf = PDF()
        pdf.add_font('DejaVu', '', font_path, uni=True)
        pdf.set_font("DejaVu", '', 12)
        pdf.add_page()

        lines = [
            f"–í–æ–∑—Ä–∞—Å—Ç: {current_age} - {retirement_age}",
            f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (—Å–µ–≥–æ–¥–Ω—è): {monthly_target_income_today:,.0f} ‚ÇΩ".replace(",", " "),
            f"–ò–Ω—Ñ–ª—è—Ü–∏—è: {inflation_rate*100:.2f}%",
            f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–æ {retirement_age}: {accumulation_interest*100:.2f}%",
            f"–°—Ç–∞–≤–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ—Å–ª–µ {retirement_age}: {retirement_interest*100:.2f}%",
            f"–†–æ—Å—Ç –≤–∑–Ω–æ—Å–æ–≤: {contribution_growth_rate*100:.2f}% –≤ –≥–æ–¥",
            f"–¶–µ–ª–µ–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª: {required_capital:,.0f} ‚ÇΩ".replace(",", " "),
            f"–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: {final_nominal:,.0f} ‚ÇΩ".replace(",", " "),
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {plan_completion_pct:.2f}%",
            f"–¶–µ–ª—å {'–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚úÖ' if goal_achieved else '–Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚ùå'}"
        ]
        for line in lines:
            pdf.cell(0, 10, line, ln=True)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π –≤ PDF
        pdf.add_page()
        pdf.set_font("DejaVu", '', 10)
        pdf.cell(0, 10, "–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", ln=True)

        pdf.set_font("DejaVu", '', 8)
        col_width = pdf.w / 4 - 5
        pdf.cell(col_width, 6, "–ú–µ—Å—è—Ü", border=1)
        pdf.cell(col_width, 6, "–í–∑–Ω–æ—Å (‚ÇΩ)", border=1)
        pdf.cell(col_width, 6, "–ö–∞–ø–∏—Ç–∞–ª (‚ÇΩ)", border=1)
        pdf.cell(col_width, 6, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)", border=1)
        pdf.ln()

        for i in range(months):
            pdf.cell(col_width, 6, str(i + 1), border=1)
            pdf.cell(col_width, 6, f"{contributions[i]:,.0f}".replace(",", " "), border=1)
            pdf.cell(col_width, 6, f"{capitals[i]:,.0f}".replace(",", " "), border=1)
            pdf.cell(col_width, 6, f"{capitals[i]/required_capital*100:.2f}%", border=1)
            pdf.ln()
            if (i + 1) % 40 == 0:
                pdf.add_page()
                pdf.set_font("DejaVu", '', 8)

        pdf.output(tmp_pdf.name)
        with open(tmp_pdf.name, "rb") as file:
            st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç", file.read(), "financial_report.pdf", "application/pdf")
